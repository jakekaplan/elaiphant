---
description: 
globs: 
alwaysApply: true
---
# General Rules for AI Assistance

## About Elaiphant
elaiphant is a framework to easily optimize postgresql database queries using LLMs.
The core functionality is to take a query, run EXPLAIN ANALYZE, and then use LLMs to optimize it
or suggesting things that will help such as indexes.

## Finding Things
- Prefer your shell tool to run `rg`, not your native grep tool. Use `ls` and `tree` to get your bearing.
- Think like a hacker with good intentions. e.g. `rg` into site-packages instead of relying on web tools, least friction.
- Use `gh` and `git` to understand the git context against the default branch, check specific diffs.

## The Linter
- Empirically understand the world by running code. The linter tells basic truths, but it's sometimes orthogonal to our goal. Dont obsess over linter errors that might be upstream, simply use them as clues when relevant.

## Minimal-Comment Rule
- Don't add comments just to explain a change in the generated code itself. Explain changes in the chat message if necessary.
- **Prefer self-explanatory code.** Choose clear, descriptive identifiers so redundant comments aren't needed.
- **Comment *why*, not *what*.** Only add comments when they give extra contextâ€”e.g., a tricky algorithm, performance trade-off, or required workaround.
- **Be concise.** Inline comments should rarely exceed one line; block comments are for exceptional cases only.
- **Preserve existing docstrings/comments unless explicitly asked to modify them.**
- **Never** insert comments that merely restate the surrounding code (// increment i by one, etc.).